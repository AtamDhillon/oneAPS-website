// <auto-generated />
using System;
using Dta.OneAps.Api.Services.Sql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Dta.OneAps.Api.Services.Sql.Migrations
{
    [DbContext(typeof(OneApsContext))]
    partial class OneApsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.HasSequence("key_value_id_seq");

            modelBuilder.HasSequence("opportunity_assessor_id_seq");

            modelBuilder.HasSequence("opportunity_history_id_seq");

            modelBuilder.HasSequence("opportunity_question_id_seq");

            modelBuilder.HasSequence("opportunity_response_answer_id_seq");

            modelBuilder.HasSequence("opportunity_response_contact_id_seq");

            modelBuilder.HasSequence("opportunity_response_download_id_seq");

            modelBuilder.Entity("Dta.OneAps.Api.Services.Entities.KeyValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Data")
                        .HasColumnType("json")
                        .HasColumnName("data");

                    b.Property<string>("Key")
                        .HasColumnType("character varying")
                        .HasColumnName("key");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("key_value_key_key");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("ix_key_value_updated_at");

                    b.ToTable("key_value");
                });

            modelBuilder.Entity("Dta.OneAps.Api.Services.Entities.Opportunity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("closed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .HasColumnType("json")
                        .HasColumnName("data");

                    b.Property<int?>("DomainId")
                        .HasColumnType("integer")
                        .HasColumnName("domain_id");

                    b.Property<int>("FrameworkId")
                        .HasColumnType("integer")
                        .HasColumnName("framework_id");

                    b.Property<int>("LotId")
                        .HasColumnType("integer")
                        .HasColumnName("lot_id");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("published_at");

                    b.Property<DateTime?>("QuestionsClosedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("questions_closed_at");

                    b.Property<long?>("ResponsesZipFilesize")
                        .HasColumnType("bigint")
                        .HasColumnName("responses_zip_filesize");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("WithdrawnAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("withdrawn_at");

                    b.HasKey("Id");

                    b.HasIndex("ClosedAt")
                        .HasDatabaseName("ix_opportunity_closed_at");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_opportunity_created_at");

                    b.HasIndex("PublishedAt")
                        .HasDatabaseName("ix_opportunity_published_at");

                    b.HasIndex("QuestionsClosedAt")
                        .HasDatabaseName("ix_opportunity_questions_closed_at");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("ix_opportunity_updated_at");

                    b.HasIndex("WithdrawnAt")
                        .HasDatabaseName("ix_opportunity_withdrawn_at");

                    b.ToTable("opportunity");
                });

            modelBuilder.Entity("Dta.OneAps.Api.Services.Entities.OpportunityAssessor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("EmailAddress")
                        .HasColumnType("character varying")
                        .HasColumnName("email_address");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("integer")
                        .HasColumnName("opportunity_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("UserId");

                    b.ToTable("opportunity_assessor");
                });

            modelBuilder.Entity("Dta.OneAps.Api.Services.Entities.OpportunityClarificationQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("answer");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("integer")
                        .HasColumnName("opportunity_id");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("published_at");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("question");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("PublishedAt")
                        .HasDatabaseName("ix_opportunity_clarification_question_published_at");

                    b.HasIndex("UserId");

                    b.ToTable("opportunity_clarification_question");
                });

            modelBuilder.Entity("Dta.OneAps.Api.Services.Entities.OpportunityHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("data");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("edited_at");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("integer")
                        .HasColumnName("opportunity_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("EditedAt")
                        .HasDatabaseName("ix_opportunity_history_edited_at");

                    b.HasIndex("OpportunityId")
                        .HasDatabaseName("ix_opportunity_history_opportunity_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_opportunity_history_user_id");

                    b.ToTable("opportunity_history");
                });

            modelBuilder.Entity("Dta.OneAps.Api.Services.Entities.OpportunityResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("data");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("integer")
                        .HasColumnName("opportunity_id");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("submitted_at");

                    b.Property<long>("SupplierCode")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_code");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("WithdrawnAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("withdrawn_at");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_opportunity_response_created_at");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("SubmittedAt")
                        .HasDatabaseName("ix_opportunity_response_submitted_at");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("ix_opportunity_response_updated_at");

                    b.ToTable("opportunity_response");
                });

            modelBuilder.Entity("Dta.OneAps.Api.Services.Entities.OpportunityResponseContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("email_address");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("integer")
                        .HasColumnName("opportunity_id");

                    b.Property<long>("SupplierCode")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_code");

                    b.HasKey("Id");

                    b.HasIndex("OpportunityId");

                    b.ToTable("opportunity_response_contact");
                });

            modelBuilder.Entity("Dta.OneAps.Api.Services.Entities.OpportunityResponseDownload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("integer")
                        .HasColumnName("opportunity_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_opportunity_response_download_created_at");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("UserId");

                    b.ToTable("opportunity_response_download");
                });

            modelBuilder.Entity("Dta.OneAps.Api.Services.Entities.OpportunityUser", b =>
                {
                    b.Property<int>("OpportunityId")
                        .HasColumnType("integer")
                        .HasColumnName("opportunity_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("OpportunityId", "UserId")
                        .HasName("opportunity_user_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("opportunity_user");
                });

            modelBuilder.Entity("Dta.OneAps.Api.Services.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<int?>("AgencyId")
                        .HasColumnType("integer")
                        .HasColumnName("agency_id");

                    b.Property<long?>("ApplicationId")
                        .HasColumnType("bigint")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("email_address");

                    b.Property<int>("FailedLoginCount")
                        .HasColumnType("integer")
                        .HasColumnName("failed_login_count");

                    b.Property<DateTime?>("LoggedInAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("logged_in_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.Property<DateTime>("PasswordChangedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("password_changed_at");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("character varying")
                        .HasColumnName("phone_number");

                    b.Property<string>("Role")
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<long?>("SupplierCode")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_code");

                    b.Property<DateTime>("TermsAcceptedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("terms_accepted_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId")
                        .HasDatabaseName("ix_user_agency_id");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("ix_user_application_id");

                    b.HasIndex("EmailAddress")
                        .IsUnique()
                        .HasDatabaseName("ix_user_email_address");

                    b.HasIndex("SupplierCode")
                        .HasDatabaseName("ix_user_supplier_code");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Dta.OneAps.Api.Services.Entities.OpportunityAssessor", b =>
                {
                    b.HasOne("Dta.OneAps.Api.Services.Entities.Opportunity", "Opportunity")
                        .WithMany("OpportunityAssessor")
                        .HasForeignKey("OpportunityId")
                        .HasConstraintName("opportunity_assessor_opportunity_id_fkey")
                        .IsRequired();

                    b.HasOne("Dta.OneAps.Api.Services.Entities.User", "User")
                        .WithMany("OpportunityAssessor")
                        .HasForeignKey("UserId")
                        .HasConstraintName("opportunity_assessor_user_id_fkey");

                    b.Navigation("Opportunity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dta.OneAps.Api.Services.Entities.OpportunityClarificationQuestion", b =>
                {
                    b.HasOne("Dta.OneAps.Api.Services.Entities.Opportunity", "Opportunity")
                        .WithMany("OpportunityClarificationQuestion")
                        .HasForeignKey("OpportunityId")
                        .HasConstraintName("opportunity_clarification_question_opportunity_id_fkey")
                        .IsRequired();

                    b.HasOne("Dta.OneAps.Api.Services.Entities.User", "User")
                        .WithMany("OpportunityClarificationQuestion")
                        .HasForeignKey("UserId")
                        .HasConstraintName("opportunity_clarification_question_user_id_fkey")
                        .IsRequired();

                    b.Navigation("Opportunity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dta.OneAps.Api.Services.Entities.OpportunityHistory", b =>
                {
                    b.HasOne("Dta.OneAps.Api.Services.Entities.Opportunity", "Opportunity")
                        .WithMany("OpportunityHistory")
                        .HasForeignKey("OpportunityId")
                        .HasConstraintName("opportunity_history_opportunity_id_fkey")
                        .IsRequired();

                    b.HasOne("Dta.OneAps.Api.Services.Entities.User", "User")
                        .WithMany("OpportunityHistory")
                        .HasForeignKey("UserId")
                        .HasConstraintName("opportunity_history_user_id_fkey")
                        .IsRequired();

                    b.Navigation("Opportunity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dta.OneAps.Api.Services.Entities.OpportunityResponse", b =>
                {
                    b.HasOne("Dta.OneAps.Api.Services.Entities.Opportunity", "Opportunity")
                        .WithMany("OpportunityResponse")
                        .HasForeignKey("OpportunityId")
                        .HasConstraintName("opportunity_response_opportunity_id_fkey")
                        .IsRequired();

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("Dta.OneAps.Api.Services.Entities.OpportunityResponseContact", b =>
                {
                    b.HasOne("Dta.OneAps.Api.Services.Entities.Opportunity", "Opportunity")
                        .WithMany("OpportunityResponseContact")
                        .HasForeignKey("OpportunityId")
                        .HasConstraintName("opportunity_response_opportunity_contact_id_fkey")
                        .IsRequired();

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("Dta.OneAps.Api.Services.Entities.OpportunityResponseDownload", b =>
                {
                    b.HasOne("Dta.OneAps.Api.Services.Entities.Opportunity", "Opportunity")
                        .WithMany("OpportunityResponseDownload")
                        .HasForeignKey("OpportunityId")
                        .HasConstraintName("opportunity_response_download_opportunity_id_fkey")
                        .IsRequired();

                    b.HasOne("Dta.OneAps.Api.Services.Entities.User", "User")
                        .WithMany("OpportunityResponseDownload")
                        .HasForeignKey("UserId")
                        .HasConstraintName("opportunity_response_download_user_id_fkey")
                        .IsRequired();

                    b.Navigation("Opportunity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dta.OneAps.Api.Services.Entities.OpportunityUser", b =>
                {
                    b.HasOne("Dta.OneAps.Api.Services.Entities.Opportunity", "Opportunity")
                        .WithMany("OpportunityUser")
                        .HasForeignKey("OpportunityId")
                        .HasConstraintName("opportunity_user_opportunity_id_fkey")
                        .IsRequired();

                    b.HasOne("Dta.OneAps.Api.Services.Entities.User", "User")
                        .WithMany("OpportunityUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("opportunity_user_user_id_fkey")
                        .IsRequired();

                    b.Navigation("Opportunity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dta.OneAps.Api.Services.Entities.Opportunity", b =>
                {
                    b.Navigation("OpportunityAssessor");

                    b.Navigation("OpportunityClarificationQuestion");

                    b.Navigation("OpportunityHistory");

                    b.Navigation("OpportunityResponse");

                    b.Navigation("OpportunityResponseContact");

                    b.Navigation("OpportunityResponseDownload");

                    b.Navigation("OpportunityUser");
                });

            modelBuilder.Entity("Dta.OneAps.Api.Services.Entities.User", b =>
                {
                    b.Navigation("OpportunityAssessor");

                    b.Navigation("OpportunityClarificationQuestion");

                    b.Navigation("OpportunityHistory");

                    b.Navigation("OpportunityResponseDownload");

                    b.Navigation("OpportunityUser");
                });
#pragma warning restore 612, 618
        }
    }
}
